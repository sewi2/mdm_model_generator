# ########################################################### #
# This file is automatically generated. Please don't edit it! #
# ########################################################### #
from decimal import Decimal

from model_utils import Choices
from django.conf import settings
from django.core.validators import MinValueValidator, MaxValueValidator
from django.db import models
from django.utils.translation import gettext_lazy as _

from pik.core.models import BasePHistorical


class BaseBenchmarkCatalogObjectHeader(BasePHistorical):
    _help_text = 'Тестовый справочник'
    _is_history_enabled = getattr(settings, 'MDM_MODELS_HISTORY_ENABLED', False)
    ENUM_STRING_CHOICES = Choices(('enumValue1', _('Значение1')), ('enumValue2', _('Значение2')), ('enumValue3', _('Значение3')))
    ENUM_INTEGER_CHOICES = Choices((1, _('Значение1')), (2, _('Значение2')), (3, _('Значение3')))
    uid = models.UUIDField(verbose_name=_('Guid'), help_text=_('Globally Unique Identifier — статистически уникальный 128-битный идентификатор. Записывается в виде строки из 32 шестнадцатеричных цифр, разбитых на группы дефисами. Формируется на стороне Мастер-системы'), db_column='guid' if getattr(settings, 'MDM_MODELS_CAMEL_CASE', False) else None, primary_key=True)
    created = models.DateTimeField(verbose_name=_('Дата создания'), help_text=_('Дата создания объекта в Мастер-системе по UTC в формате ISO'), blank=True, null=True, default=None, editable=False, db_column='created' if getattr(settings, 'MDM_MODELS_CAMEL_CASE', False) else None, db_index=True)
    updated = models.DateTimeField(verbose_name=_('Дата обновления'), help_text=_('Дата обновления объекта в Мастер-системе по UTC в формате ISO'), blank=True, null=True, default=None, editable=False, db_column='updated' if getattr(settings, 'MDM_MODELS_CAMEL_CASE', False) else None, db_index=True)
    deleted = models.DateTimeField(verbose_name=_('Дата деактивации'), help_text=_('Дата деактивации / пометки на удаление объекта в Мастер-системе по UTC в формате ISO'), blank=True, null=True, default=None, editable=False, db_column='deleted' if getattr(settings, 'MDM_MODELS_CAMEL_CASE', False) else None, db_index=True)
    valid_object_guid = models.UUIDField(verbose_name=_('guid объекта - эталона'), help_text=_('guid объекта - эталона. Заполнен для объектов-дублей'), blank=True, null=True, default=None, editable=False, db_column='validObjectGuid' if getattr(settings, 'MDM_MODELS_CAMEL_CASE', False) else None)
    valid_object_type = models.CharField(verbose_name=_('type объекта - эталона'), help_text=_('type объекта - эталона. Заполнен для объектов-дублей'), blank=True, null=True, default=None, editable=False, db_column='validObjectType' if getattr(settings, 'MDM_MODELS_CAMEL_CASE', False) else None, max_length=255)
    string_field = models.CharField(verbose_name=_('Строка'), help_text=_("Пример значения 'string'"), blank=True, null=True, default=None, editable=False, db_column='stringField' if getattr(settings, 'MDM_MODELS_CAMEL_CASE', False) else None, max_length=150)
    string_uuid = models.UUIDField(verbose_name=_('Уникальный идентификатор'), help_text=_("Пример значения 'string', формат 'uuid'"), blank=True, null=True, default=None, editable=False, db_column='stringUuid' if getattr(settings, 'MDM_MODELS_CAMEL_CASE', False) else None)
    string_date_time = models.DateTimeField(verbose_name=_('Дата и время'), help_text=_("Пример значения 'string', формат 'date-time'"), blank=True, null=True, default=None, editable=False, db_column='stringDateTime' if getattr(settings, 'MDM_MODELS_CAMEL_CASE', False) else None)
    string_date = models.DateField(verbose_name=_('Дата'), help_text=_("Пример значения 'string', формат 'date'"), blank=True, null=True, default=None, editable=False, db_column='stringDate' if getattr(settings, 'MDM_MODELS_CAMEL_CASE', False) else None)
    number_field = models.DecimalField(verbose_name=_('Число'), help_text=_("Пример значения 'number'"), blank=True, null=True, default=None, editable=False, db_column='numberField' if getattr(settings, 'MDM_MODELS_CAMEL_CASE', False) else None, validators=[MinValueValidator(Decimal('-1000000000000')), MaxValueValidator(Decimal('1000000000000'))], max_digits=17, decimal_places=4)
    decimal_field = models.DecimalField(verbose_name=_('Десятичное число'), help_text=_("Пример значения 'number', формат 'decimal'"), blank=True, null=True, default=None, editable=False, db_column='decimalField' if getattr(settings, 'MDM_MODELS_CAMEL_CASE', False) else None, validators=[MinValueValidator(Decimal('-1000000000000')), MaxValueValidator(Decimal('1000000000000'))], max_digits=17, decimal_places=4)
    integer_field = (models.BigIntegerField if getattr(settings, 'MDM_MODELS_BIGINT_ON', False) else models.IntegerField)(verbose_name=_('Целое число'), help_text=_("Пример значения 'integer'"), blank=True, null=True, default=None, editable=False, db_column='integerField' if getattr(settings, 'MDM_MODELS_CAMEL_CASE', False) else None, validators=[MinValueValidator(-1000000000000), MaxValueValidator(1000000000000)])
    is_boolean = models.BooleanField(verbose_name=_('Булево'), help_text=_("Пример значения 'boolean'"), blank=True, null=True, default=None, editable=False, db_column='isBoolean' if getattr(settings, 'MDM_MODELS_CAMEL_CASE', False) else None)
    enum_string = models.CharField(verbose_name=_('Перечисление(Строка)'), help_text=_("Пример значения 'enum+string'"), blank=True, null=True, default=None, editable=False, db_column='enumString' if getattr(settings, 'MDM_MODELS_CAMEL_CASE', False) else None, choices=ENUM_STRING_CHOICES, max_length=50)
    enum_integer = (models.BigIntegerField if getattr(settings, 'MDM_MODELS_BIGINT_ON', False) else models.IntegerField)(verbose_name=_('Перечисление(Целое число)'), help_text=_("Пример значения 'enum+integer'"), blank=True, null=True, default=None, editable=False, db_column='enumInteger' if getattr(settings, 'MDM_MODELS_CAMEL_CASE', False) else None, choices=ENUM_INTEGER_CHOICES)
    hash = models.CharField(verbose_name=_('Хеш сумма'), help_text=_("Хеш сумма 'Строка'(SHA512)"), blank=True, null=True, default=None, editable=False, db_column='hash' if getattr(settings, 'MDM_MODELS_CAMEL_CASE', False) else None, max_length=1000)
    encrypted = models.CharField(verbose_name=_('Зашифрованное значение'), help_text=_("Зашифрованное значение 'Строка'(RSA)"), blank=True, null=True, default=None, editable=False, db_column='encrypted' if getattr(settings, 'MDM_MODELS_CAMEL_CASE', False) else None, max_length=1000)
    comment = models.CharField(verbose_name=_('Комментарий'), help_text=_('Комментарий'), blank=True, null=True, default=None, editable=False, db_column='comment' if getattr(settings, 'MDM_MODELS_CAMEL_CASE', False) else None, max_length=256)

    class Meta:
        verbose_name = _('Тестовый справочник')
        verbose_name_plural = _('Тестовый справочник')
        abstract = True
        db_table = 'BenchmarkCatalogObjectHeader' if getattr(settings, 'MDM_MODELS_CAMEL_CASE', False) else None
